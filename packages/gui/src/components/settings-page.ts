import m from 'mithril';
import { Highlighter, labelGeneratorForm, Pages, Settings } from '../models';
import { MeiosisComponent } from '../services';
import { FormAttributes, LayoutForm, UIForm } from 'mithril-ui-form';
import { extractPropertyKeys } from '../utils';
import { Option, Tabs } from 'mithril-materialized';
import { LabelEditor } from './ui/label-editor';
import { CircularSpinner } from './ui/preloader';

export const SettingsPage: MeiosisComponent = () => {
  // const defaultTemplate = [
  //   { id: 'annotator', type: 'none' },
  //   { id: 'created', type: 'none', description: 'Autogenerated date time', autogenerate: 'datetime' },
  // ] as UILabel[];
  let allPropertyKeys: Option<string>[] = [];
  let labelForm: undefined | UIForm<any>;
  let labelFormParseError: undefined | string;
  let labels = {};
  // let guiLabels = {
  //   template: deepCopy(defaultTemplate),
  // } as EditLabelForm;

  return {
    oninit: async ({
      attrs: {
        state: { article: data },
        actions: { setPage, refreshData },
      },
    }) => {
      if (typeof data === 'undefined') {
        await refreshData(1);
      }
      setPage(Pages.SETTINGS);
    },
    view: ({ attrs }) => {
      const { state, actions } = attrs;
      const { settings = {} as Settings, article: data } = state;
      if (!settings.loaded) {
        return m(CircularSpinner);
      }
      if (data) {
        allPropertyKeys = extractPropertyKeys(data).map((id) => ({ id, label: id }));
        // console.log(allPropertyKeys);
      }

      try {
        labelForm = settings.labelsStr ? JSON.parse(settings.labelsStr) : undefined;
        settings.labelsStr = JSON.stringify(labelForm, null, 2);
        labelFormParseError = undefined;
      } catch (e: any) {
        labelFormParseError = e.toString();
        labelForm = undefined;
      }
      if (typeof settings.labels === 'string') settings.labels = [];
      // if (Array.isArray(settings.labels) && settings.labels.length === 0 && settings.labelsStr) {
      //   settings.labels = JSON.parse(settings.labelsStr);
      //   console.log(settings.labels);
      // }

      return m(
        '#settings-page.settings.page.row',
        m(
          '.col.s12.m6',
          m(Tabs, {
            tabs: [
              {
                id: 'template',
                title: 'Template',
                vnode: m(
                  'div',
                  [
                    m(LayoutForm, {
                      form: [
                        {
                          type: 'md',
                          value: 'Use markdown to style your template and {{PROPERTY_NAME}} to render the text.',
                        },
                        {
                          id: 'template',
                          type: 'textarea',
                          label: 'Article template',
                          placeholder:
                            'Markdown template to convert the raw data to a HTML view. Use {{PLACEHOLDER}} to use object properties.',
                        },
                        {
                          type: 'md',
                          value: `Below, you can see the first article in your data, which may help you in creating the template. Available properties are:
${allPropertyKeys.map((p) => `- ${p.label}`).join('\n')}`,
                          transform: (dir, value: string) => {
                            console.log(value);
                            return dir === 'to' ? value.replace(/<\/?em>/g, '_') : value;
                          },
                        },
                        {
                          type: 'textarea',
                          label: 'Example data',
                          disabled: true,
                          value: JSON.stringify(data, null, 2),
                        },
                      ],
                      obj: settings,
                      context: [{ PROPERTY_NAME: '{{PROPERTY_NAME}}' }],
                      onchange: async () => {
                        await actions.saveSettings(settings);
                      },
                    } as FormAttributes<Settings>),
                  ]
                  // m('pre.col.s12', JSON.stringify(data, null, 2))
                ),
              },
              {
                id: 'labels',
                title: 'Labels',
                vnode: m(LayoutForm, {
                  form: [
                    { type: 'md', value: 'Specify the labels you want to use.' },
                    {
                      id: 'labels',
                      label: 'New label',
                      repeat: true,
                      pageSize: 1,
                      type: labelGeneratorForm,
                    },
                  ],
                  obj: settings,
                  onchange: async () => {
                    console.log(JSON.stringify(settings.labels, null, 2));
                    await actions.saveSettings(settings);
                  },
                } as FormAttributes<Settings>),
              },
              {
                id: 'annotators',
                title: 'Annotators',
                vnode: m(LayoutForm, {
                  form: [
                    {
                      type: 'md',
                      value:
                        'Specify the annotators and choose the current annotator: it will be used during labelling.',
                    },
                    {
                      id: 'annotators',
                      repeat: true,
                      pageSize: 1,
                      type: [
                        { id: 'id', label: 'Initials', type: 'text', className: 'col s4 m3 l2' },
                        { id: 'label', label: 'Name', type: 'text', className: 'col s8 m9 l10' },
                        { id: 'email', label: 'E-mail', type: 'email' },
                      ],
                      label: 'Annotators',
                    },
                    {
                      id: 'annotator',
                      options: settings.annotators,
                      label: 'Current annotator',
                    },
                  ],
                  obj: settings,
                  onchange: async () => {
                    await actions.saveSettings(settings);
                  },
                } as FormAttributes<Settings>),
              },
              {
                id: 'highlighters',
                title: 'Highlighters',
                vnode: m(LayoutForm, {
                  form: [
                    {
                      type: 'md',
                      value:
                        'Optionally, you can create text highlighters to highlight text, or to add a (temporary) transformation to the text.',
                    },
                    {
                      id: 'highlighters',
                      label: 'Highlighters',
                      repeat: true,
                      pageSize: 1,
                      type: [
                        {
                          id: 'type',
                          label: 'Type',
                          type: 'select',
                          className: 'col s4 m3',
                          options: [
                            { id: 'regex', label: 'Regex' },
                            { id: 'string', label: 'String' },
                            { id: 'transform', label: 'Transform' },
                          ],
                        },
                        {
                          id: 'value',
                          show: ['type!=transform'],
                          label: 'Value',
                          className: 'col s8 m9',
                          type: 'text',
                        },
                        {
                          id: 'value',
                          show: ['type=transform'],
                          label: 'Match',
                          className: 'col s4 m5',
                          type: 'text',
                        },
                        {
                          id: 'replace',
                          show: ['type=transform'],
                          label: 'Replace',
                          className: 'col s4 m4',
                          type: 'text',
                        },
                        {
                          id: 'properties',
                          label: 'Select properties',
                          type: 'select',
                          className: 'col s9 m10',
                          multiple: true,
                          description: 'Apply highlighter to selected object properties that are used in your template',
                          options: allPropertyKeys,
                        },
                        {
                          id: 'color',
                          label: 'Color',
                          className: 'col s3 m2',
                          type: 'color',
                          show: ['type!=transform'],
                        },
                      ] as UIForm<Highlighter>,
                    },
                  ],
                  obj: settings,
                  onchange: async () => {
                    await actions.saveSettings(settings);
                  },
                } as FormAttributes<Settings>),
              },
            ],
          })
        ),
        m(
          '.col.s12.m6',
          m(LabelEditor, attrs),
          m(
            '.row',
            Object.keys(labels).length > 0
              ? m('pre.col.s12', JSON.stringify(labels, null, 2))
              : m('pre.col.s12', 'No label set')
          )
        )
      );
    },
  };
};
